# java经典面试题总结
##
## 精选11道Java面试题及参考答案（包含部分阿里和华为面试题）
### JVM常考题型
1. JVM的类加载机制是什么？有哪些实现方式？
类的加载指的是将类的.class文件中的二进制数据读入到内存中，将其放在运行时数据区的方法去
内，然后在堆区创建一个java.lang.Class对象，用来封装在方法区内的数据结构。类的加载最终
是在堆区内的Class对象，Class对象封装了类在方法区内的数据结构，并且向Java程序员提供了
访问方法区内的数据结构的接口。类加载有三种方式：
1）命令行启动应用时候由**JVM初始化加载**
2）通过**Class.forName()方法动态加载**
3）通过**ClassLoader.loadClass()方法动态加载**

2. JVM的常见垃圾回收算法？
1）标记-清除算法：先标记出所有需要回收的对象，在标记完成后统一回收被标记的对象。
2）复制算法：将可用内存按容量划分为大小相等的两块，每次只使用其中的一块。当一块内存用完
了，将其复制存放到另一块内存上面，然后再把已使用过的内存空间一次清理掉。
3）标记-整理算法：标记过程与“标记-清除”算法一样，但后续步骤不是直接对可回收对象进行清理，
而是将标记完的内容向一端移动，然后直接清理掉端边界以外的内存。
4）分代收集算法：一般是把Java堆分为新生代和老年代，根据各个年代的特点采用适当的收集
算法。当发现新生代有大批对象死去，选用复制算法。老年代中因为对象存活率高，必须使用
“标记-清理”或“标记-整理”算法来进行回收。

3. JVM调优的常见命令行工具有哪些？JVM常见的调优参数有哪些？
（1）JVM调优的常见命令工具包括：
    1）jps命令用于查询正在运行的JVM进程，
    2）jstat可以实时显示本地或远程JVM进程中类装载、内存、垃圾收集、JIT编译等数据
    3）jinfo用于查询当前运行着的JVM属性和参数的值
    4）jmap用于显示当前Java堆和永久代的详细信息
    5）jhat用于分析使用jmap生成的dump文件，是JDK自带的工具
    6）jstack用于生成当前JVM的所有线程快照，线程快照是虚拟机每一条线程正在执行的方法,
    目的是定位线程出现长时间停顿的原因。
（2）JVM常见的调优参数包括：
    -Xmx
    指定java程序的最大堆内存, 使用java -Xmx5000M -version判断当前系统能分配的最大堆内存
    -Xms
    指定最小堆内存, 通常设置成跟最大堆内存一样，减少GC
    -Xmn
    设置年轻代大小。整个堆大小=年轻代大小 + 年老代大小。所以增大年轻代后，将会减小年老代大小。
    此值对系统性能影响较大，Sun官方推荐配置为整个堆的3/8。
    -Xss
    指定线程的最大栈空间, 此参数决定了java函数调用的深度, 值越大调用深度越深, 若值太小
    则容易出栈溢出错误(StackOverflowError)

    -XX:PermSize
    指定方法区(永久区)的初始值,默认是物理内存的1/64， 在Java8永久区移除, 代之的是元数据区， 由-XX:MetaspaceSize指定
    -XX:MaxPermSize
    指定方法区的最大值, 默认是物理内存的1/4， 在java8中由-XX:MaxMetaspaceSize指定元数据区的大小
    -XX:NewRatio=n
    年老代与年轻代的比值，-XX:NewRatio=2, 表示年老代与年轻代的比值为2:1
    -XX:SurvivorRatio=n
    Eden区与Survivor区的大小比值，-XX:SurvivorRatio=8表示Eden区与Survivor区的大小比值是8:1:1，因为Survivor区有两个(from, to)

4. ConcurrentHashMap加锁机制是什么，详细说一下？
HashTable容器在竞争激烈的并发环境下表现出效率低下的原因，是因为所有访问HashTable的线程都必须竞争同一把锁，那假如容器里有多把锁，
每一把锁用于锁容器其中一部分数据，那么当多线程访问容器里不同数据段的数据时，线程间就不会存在锁竞争，从而可以有效的提高并发访问效率，
这就是ConcurrentHashMap所使用的锁分段技术，首先将数据分成一段一段的存储，然后给每一段数据配一把锁，当一个线程占用锁访问其中一个段的
数据的时候，其他段的数据也能被其他线程访问。
5. G1收集器简介？以及它的内存划分怎么样的？
（1）简介：
Garbage-First（G1，垃圾优先）收集器是服务类型的收集器，目标是多处理器机器、大内存机器。它高度符合垃圾收集暂停时间的目标，同时实现
高吞吐量。Oracle JDK 7 update 4 以及更新发布版完全支持G1垃圾收集器
（2）G1的内存划分方式：
它是将堆内存划分为多个大小相等的 heap 区,每个heap区都是逻辑上连续的一段内存(virtual memory). 其中一部分区域被当成与老一代收集器
相同的角色(eden, survivor, old), 但每个角色的区域个数都不是固定的。这在内存使用上提供了更多的灵活性

##
6. 在重写equals方法时，需要遵循哪些约定，具体介绍一下？
重写equals方法时需要遵循通用约定：自反性、对称性、传递性、一致性.、非空性
1）自反性
对于任何非null的引用值x,x.equals(x)必须返回true。---这一点基本上不会有啥问题
2）对称性
对于任何非null的引用值x和y，当且仅当x.equals(y)为true时，y.equals(x)也为true。
3）传递性
对于任何非null的引用值x、y、z。如果x.equals(y)==true,y.equals(z)==true,那么x.equals(z)==true。
4） 一致性
对于任何非null的引用值x和y，只要equals的比较操作在对象所用的信息没有被修改，那么多次调用x.eqals(y)就会一致性地返回true,或者一致性的返回false。
5）非空性
所有比较的对象都不能为空。

7. Synchronized优化后的锁机制简单介绍一下，包括自旋锁、偏向锁、轻量级锁、重量级锁？

自旋锁：

线程自旋说白了就是让cup在做无用功，比如：可以执行几次for循环，可以执行几条空的汇编指令，目的是占着CPU不放，等待获取锁的机会。如果旋的时间过长会影响整体性能，时间过短又达不到延迟阻塞的目的。
偏向锁

偏向锁就是一旦线程第一次获得了监视对象，之后让监视对象“偏向”这个线程，之后的多次调用则可以避免CAS操作，
说白了就是置个变量，如果发现为true则无需再走各种加锁/解锁流程。

轻量级锁：
轻量级锁是由偏向所升级来的，偏向锁运行在一个线程进入同步块的情况下，当第二个线程加入锁争用的时候，偏向锁就会升级为轻量级锁；

重量级锁

重量锁在JVM中又叫对象监视器（Monitor），它很像C中的Mutex，除了具备Mutex(0|1)互斥的功能，它还负责实现了Semaphore(信号量)的功能，也就是说它至少包含一个竞争锁的队列，和一个信号阻塞队列（wait队列），前者负责做互斥，后一个用于做线程同步。
偏向锁、轻量级锁、重量级锁的对比：
8. Redis和Memcache区别对比？如何选择这两个技术？

区别：

1） Redis和Memcache都是将数据存放在内存中，都是内存数据库。不过memcache还可用于缓存其他东西，例如图片、视频等等。

2）Redis不仅仅支持简单的k/v类型的数据，同时还提供list，set，hash等数据结构的存储。
3）虚拟内存--Redis当物理内存用完时，可以将一些很久没用到的value 交换到磁盘
4）过期策略--memcache在set时就指定，例如set key1 0 0 8,即永不过期。Redis可以通过例如expire 设定，例如expire name 10
5）分布式--设定memcache集群，利用magent做一主多从;redis可以做一主多从。都可以一主一从
6）存储数据安全--memcache挂掉后，数据没了；redis可以定期保存到磁盘（持久化）
7）灾难恢复--memcache挂掉后，数据不可恢复; redis数据丢失后可以通过aof恢复

8）Redis支持数据的备份，即master-slave模式的数据备份。
选型：
若是简单的存取key-value这样的数据用memcache好一些
若是要支持数据持久化，多数据类型(如集合、散列之类的)，用列表类型做队列之类的高级应用，就用redis

9. Redis的持久化机制是什么？各自的优缺点？
redis提供两种持久化机制RDB和AOF机制。
1）RDB持久化方式：
是指用数据集快照的方式记录redis数据库的所有键值对。

优点：
1.只有一个文件dump.rdb，方便持久化。
2.容灾性好，一个文件可以保存到安全的磁盘。

3.性能最大化，fork子进程来完成写操作，让主进程继续处理命令，所以是IO最大化。
4.相对于数据集大时，比AOF的启动效率更高。

缺点：

1.数据安全性低。
2）AOF持久化方式：
是指所有的命令行记录以redis命令请求协议的格式保存为aof文件。
优点：
1.数据安全，aof持久化可以配置appendfsync属性，有always，每进行一次命令操作就记录到aof文件中一次。
2.通过append模式写文件，即使中途服务器宕机，可以通过redis-check-aof工具解决数据一致性问题。

3.AOF机制的rewrite模式。
缺点：
1.文件会比RDB形式的文件大。
2.数据集大的时候，比rdb启动效率低。

10. Mysql的数据库表锁、行锁、页级锁？
表级，直接锁定整张表，在你锁定期间，其它进程无法对该表进行写操作。如果你是写锁，则其它进程则读也不允许
行级,，仅对指定的记录进行加锁，这样其它进程还是可以对同一个表中的其它记录进行操作。
页级，表级锁速度快，但冲突多，行级冲突少，但速度慢。所以取了折衷的页级，一次锁定相邻的一组记录。
11. 数据库的四大特征，数据库的隔离级别？
数据库的四大特征：

（1）原子性（Atomicity）
原子性是指事务包含的所有操作要么全部成功，要么全部失败回滚。

（2）一致性（Consistency）

一个事务执行之前和执行之后都必须处于一致性状态。
（3）隔离性（Isolation）
隔离性是当多个用户并发访问数据库时，比如操作同一张表时，数据库为每一个用户开启的事务，不能被其他事务的操作所干扰，多个并发事务之间要相互隔离。

4）持久性（Durability）

持久性是指一个事务一旦被提交了，那么对数据库中的数据的改变就是永久性的。
数据库的隔离级别：

1）Serializable (串行化)：可避免脏读、不可重复读、幻读的发生。

2）Repeatable read (可重复读)：可避免脏读、不可重复读的发生。

3）Read committed (读已提交)：可避免脏读的发生。

4）Read uncommitted (读未提交)：最低级别，任何情况都无法保证。
这里给大家提供一个学习交流的平台，Java架构师群：230419550
具有1-5工作经验的，面对目前流行的技术不知从何下手，需要突破技术瓶颈的可以加群。在公司待久了，过得很安逸，但跳槽时面试碰壁。需要在短时间内进修、跳槽拿高薪的可以加群。如果没有工作经验，但基础非常扎实，对java工作机制，常用设计思想，常用java开发框架掌握熟练的可以加群。
发布于 2018-06-22

## BAT等公司必问的8道Java经典面试题，你都会了吗？
整理自https://zhuanlan.zhihu.com/p/38131658?utm_source=qq&utm_medium=social&utm_oi=994898152561942528

工作多年以及在面试中，我经常能体会到，有些面试者确实是认真努力工作，但坦白说表现出的能力水平却不足以通过面试，通常是两方面原因：

1、“知其然不知其所以然”。做了多年技术，开发了很多业务应用，但似乎并未思考过种种技术选择背后的逻辑。坦白说，我并不放心把具有一定深度的任务交给他。

2、知识碎片化，不成系统。在面试中，面试者似乎无法完整、清晰地描述自己所开发的系统，或者使用的相关技术。平时可能埋头苦干，或者过于死磕某个实现细节，并没有抬头审视这些技术。

前人已经掉过的坑，后来的同学就别再“前仆后继”了！

Java基础
1、谈谈你对 Java 平台的理解？“Java 是解释执行”，这句话正确吗？

考点分析：

对于这类笼统的问题，你需要尽量表现出自己的思维深入并系统化，Java 知识理解得也比较全面，一定要避免让面试官觉得你是个“知其然不知其所以然”的人。毕竟明白基本组成和机制，是日常工作中进行问题诊断或者性能调优等很多事情的基础，相信没有招聘方会不喜欢“热爱学习和思考”的面试者。

回归正题，对于 Java 平台的理解，可以从很多方面简明扼要地谈一下，例如：Java 语言特性，包括泛型、Lambda 等语言特性；基础类库，包括集合、IO/NIO、网络、并发、安全等基础类库。对于我们日常工作应用较多的类库，面试前可以系统化总结一下，有助于临场发挥。

下图是我总结的一个相对宽泛的蓝图供你参考。






2、请对比 Exception 和 Error，另外，运行时异常与一般异常有什么区别？

考点分析：

分析 Exception 和 Error 的区别，是从概念角度考察了 Java 处理机制。总的来说，还处于理解的层面，面试者只要阐述清楚就好了。

我们在日常编程中，如何处理好异常是比较考验功底的，我觉得需要掌握两个方面。

第一，理解 Throwable、Exception、Error 的设计和分类。比如，掌握那些应用最为广泛的子类，以及如何自定义异常等。

很多面试官会进一步追问一些细节，比如，你了解哪些 Error、Exception 或者 RuntimeException？我画了一个简单的类图，并列出来典型例子，可以给你作为参考，至少做到基本心里有数。






第二，理解 Java 语言中操作 Throwable 的元素和实践。掌握最基本的语法是必须的，如 try-catch-finally 块，throw、throws 关键字等。与此同时，也要懂得如何处理典型场景。

3、谈谈 Java 反射机制，动态代理是基于什么原理？

考点分析：

这个题目给我的第一印象是稍微有点诱导的嫌疑，可能会下意识地以为动态代理就是利用反射机制实现的，这么说也不算错但稍微有些不全面。功能才是目的，实现的方法有很多。

总的来说，这道题目考察的是 Java 语言的另外一种基础机制： 反射，它就像是一种魔法，引入运行时自省能力，赋予了 Java 语言令人意外的活力，通过运行时操作元数据或对象，Java 可以灵活地操作运行时才能确定的信息。而动态代理，则是延伸出来的一种广泛应用于产品开发中的技术，很多繁琐的重复编程，都可以被动态代理机制优雅地解决。

从考察知识点的角度，这道题涉及的知识点比较庞杂，所以面试官能够扩展或者深挖的内容非常多，比如：

考察你对反射机制的了解和掌握程度。
动态代理解决了什么问题，在你业务系统中的应用场景是什么？
JDK 动态代理在设计和实现上与 cglib 等方式有什么不同，进而如何取舍？
4、Java 提供了哪些 IO 方式？ NIO 如何实现多路复用？

在实际面试中，从传统 IO 到 NIO、NIO 2，其中有很多地方可以扩展开来，考察点涉及方方面面，比如：

基础 API 功能与设计， InputStream/OutputStream 和 Reader/Writer 的关系和区别。
NIO、NIO 2 的基本组成。
给定场景，分别用不同模型实现，分析 BIO、NIO 等模式的设计和实现原理。
NIO 提供的高性能数据操作方式是基于什么原理，如何使用？
或者，从开发者的角度来看，你觉得 NIO 自身实现存在哪些问题？有什么改进的想法吗？
IO 的内容比较多，专栏一讲很难能够说清楚。IO 不仅仅是多路复用，NIO 2 也不仅仅是异步 IO，尤其是数据操作部分，会在专栏下一讲详细分析。

5、如何保证容器是线程安全的？ConcurrentHashMap 如何实现高效地线程安全？

典型回答：

Java 提供了不同层面的线程安全支持。在传统集合框架内部，除了 Hashtable 等同步容器，还提供了所谓的同步包装器（Synchronized Wrapper），我们可以调用 Collections 工具类提供的包装方法，来获取一个同步的包装容器（如 Collections.synchronizedMap），但是它们都是利用非常粗粒度的同步方式，在高并发情况下，性能比较低下。

另外，更加普遍的选择是利用并发包提供的线程安全容器类，它提供了：

各种并发容器，比如 ConcurrentHashMap、CopyOnWriteArrayList。
各种线程安全队列（Queue/Deque），如 ArrayBlockingQueue、SynchronousQueue。
各种有序容器的线程安全版本等。
具体保证线程安全的方式，包括有从简单的 synchronize 方式，到基于更加精细化的，比如基于分离锁实现的 ConcurrentHashMap 等并发实现等。具体选择要看开发的场景需求，总体来说，并发包内提供的容器通用场景，远优于早期的简单同步实现。

6、谈谈接口和抽象类有什么区别？

考点分析：

这是个非常高频的 Java 面向对象基础问题，看起来非常简单的问题，如果面试官稍微深入一些，你会发现很多有意思的地方，可以从不同角度全面地考察你对基本机制的理解和掌握。

比如:

对于 Java 的基本元素的语法是否理解准确。能否定义出语法基本正确的接口、抽象类或者相关继承实现，涉及重载（Overload）、重写（Override）更是有各种不同的题目。
在软件设计开发中妥善地使用接口和抽象类。你至少知道典型应用场景，掌握基础类库重要接口的使用；掌握设计方法，能够在 review 代码的时候看出明显的不利于未来维护的设计。
掌握 Java 语言特性演进。现在非常多的框架已经是基于 Java 8，并逐渐支持更新版本，掌握相关语法，理解设计目的是很有必要的。

Java进阶
7、synchronized 底层如何实现？什么是锁的升级、降级？

考点分析：

今天的问题主要是考察你对 Java 内置锁实现的掌握，也是并发的经典题目。我在前面给出的典型回答，涵盖了一些基本概念。如果基础不牢，有些概念理解起来就比较晦涩，我建议还是尽量理解和掌握，即使有不懂的也不用担心，在后续学习中还会逐步加深认识。

我个人认为，能够基础性地理解这些概念和机制，其实对于大多数并发编程已经足够了，毕竟大部分工程师未必会进行更底层、更基础的研发，很多时候解决的是知道与否，真正的提高还要靠实践踩坑。

后面我会进一步分析：

从源码层面，稍微展开一些 synchronized 的底层实现，并补充一些上面答案中欠缺的细节，有同学反馈这部分容易被问到。如果你对 Java 底层源码有兴趣，但还没有找到入手点，这里可以成为一个切入点。
理解并发包中 java.util.concurrent.lock 提供的其他锁实现，毕竟 Java 可不是只有 ReentrantLock 一种显式的锁类型，我会结合代码分析其使用。
8、synchronized 和 ReentrantLock 有什么区别？有人说 synchronized 最慢，这话靠谱吗？

考点分析：

今天的题目是考察并发编程的常见基础题，我给出的典型回答算是一个相对全面的总结。

对于并发编程，不同公司或者面试官面试风格也不一样，有个别大厂喜欢一直追问你相关机制的扩展或者底层，有的喜欢从实用角度出发，所以你在准备并发编程方面需要一定的耐心。

我认为，锁作为并发的基础工具之一，你至少需要掌握：

理解什么是线程安全。
synchronized、ReentrantLock 等机制的基本使用与案例。
更近一步，你还需要：

掌握 synchronized、ReentrantLock 底层实现；理解锁膨胀、降级；理解偏斜锁、自旋锁、轻量级锁、重量级锁等概念。
掌握并发包中 java.util.concurrent.lock 各种不同实现和案例分析。
典型回答：

synchronized 是 Java 内建的同步机制，所以也有人称其为 Intrinsic Locking，它提供了互斥的语义和可见性，当一个线程已经获取当前锁时，其他试图获取的线程只能等待或者阻塞在那里。

在 Java 5 以前，synchronized 是仅有的同步手段，在代码中， synchronized 可以用来修饰方法，也可以使用在特定的代码块儿上，本质上 synchronized 方法等同于把方法全部语句用 synchronized 块包起来。

ReentrantLock，通常翻译为再入锁，是 Java 5 提供的锁实现，它的语义和 synchronized 基本相同。再入锁通过代码直接调用 lock() 方法获取，代码书写也更加灵活。与此同时，ReentrantLock 提供了很多实用的方法，能够实现很多 synchronized 无法做到的细节控制，比如可以控制 fairness，也就是公平性，或者利用定义条件等。但是，编码中也需要注意，必须要明确调用 unlock() 方法释放，不然就会一直持有该锁。

synchronized 和 ReentrantLock 的性能不能一概而论，早期版本 synchronized 在很多场景下性能相差较大，在后续版本进行了较多改进，在低竞争场景中表现可能优于 ReentrantLock。

欢迎工作一到五年的Java程序员朋友们加入Java架构开发：744677563

本群提供免费的学习指导 架构资料 以及免费的解答

不懂得问题都可以在本群提出来 之后还会有职业生涯规划以及面试指导


百度搜索 “Java面试题” 前200页（含答案）
前言
本文中的题目来源于网上的一篇文章《百度搜索 “Java面试题” 前200页》，但该文章里面只有题目，没有答案。因此，我整理了一些答案发布于本文。本文整理答案的原则是尽量做到精简、点到即止（因为一般面试题的试卷里面的作答区域有限）。如果你有更好的答案，欢迎在评论区指出，或者给Github仓库提PR。

本文永久更新地址：https://github.com/nnngu/LearningNotes/blob/master/Interview/03%20%E7%99%BE%E5%BA%A6%E6%90%9C%E7%B4%A2%20%E2%80%9CJava%E9%9D%A2%E8%AF%95%E9%A2%98%E2%80%9D%20%E5%89%8D200%E9%A1%B5%EF%BC%88%E5%90%AB%E7%AD%94%E6%A1%88%EF%BC%89.md

基本概念
1、操作系统中 heap 和 stack 的区别

堆：堆空间一般由程序员来分配，可以由垃圾回收机制来回收。一般用来存放new创建的对象和数组。
栈：栈是“后进先出”的存储空间，一般用来存储基本类型的数据和对象的引用。
2、什么是基于注解的切面实现

用注解的方式实现的面向切面编程（AOP），可以在某个方法的执行前或者执行后插入一些代码（例如日志功能的代码）。
3、什么是 对象/关系 映射集成模块

对象/关系映射(ORM)：是指将程序中的对象自动持久化到关系型数据库中
4、什么是 Java 的反射机制

反射机制：是指程序可以在运行时 访问 或 修改 它本身状态和方法的这种能力。
5、什么是 ACID

A：atom  原子性
C：consistency  一致性
I：isolation  隔离性
D：durability  持久性
6、BS与CS的联系与区别

C/S（Client/Server）：是指需要安装的客户端应用程序。
B/S（Brower/Server）：是指可以用浏览器直接访问的应用程序。
7、Cookie 和 Session 的区别

Cookie：是把数据保存在浏览器本地，并随着每一次请求发送到服务器。
Session：是把用户数据保存在服务器端。
8、fail-fast 与 fail-safe 机制有什么区别

fail-fast（快速失败）：快速失败机制在遍历一个集合时，如果集合内容被修改，会抛出ConcurrentModificationException异常。
fail-safe（安全失败）：安全失败机制对集合的任何修改都会在一个复制的集合上进行，因此不会抛出异常。
9、get 和 post请求的区别

get：
1、请求的参数会附加在URL之后，多个参数用 & 连接。
2、因为URL的长度限制，get 方式传输的数据大小有所限制。
3、安全性低，因为传输的数据会显示在请求的URL中。
post：
1、将请求参数放置在 HTTP 数据包，发送给服务器。
2、传送的数据量比较大
3、安全性较高
10、Interface 与 abstract 类的区别

1、接口（Interface）需要被实现，抽象类（abstract类）需要被继承。
2、一个类可以实现多个接口，但一个类只能继承一个抽象类。
3、接口里面的方法全部是抽象的，抽象类里面可以有非抽象的方法。
11、IoC的优点是什么

IoC（控制反转）的优点是：我们需要使用一个对象的时候无需自己创建，可以从IoC容器中直接获取一个对象，然后直接使用。
12、IO 和 NIO 的区别，NIO的优点

1、IO是面向流的，NIO是面向缓冲区的。
2、IO是阻塞的，NIO是非阻塞的。
3、NIO有选择器机制，可以让一个线程来监视多个IO通道。
NIO的优点：
1、不需要使用 read() 或者 write() 就可以处理文件内容。
2、NIO的处理效率很快。
13、Java 8 / Java 7 为我们提供了什么新功能

Java7 新特性：
1、switch里面的case条件可以使用字符串了
2、运用 List\<String\> tempList = new ArrayList<>(); 即泛型实例化类型自动推断
Java8 新特性：
1、Java8 允许我们给接口添加一个非抽象的方法实现，只需要使用 default 关键字即可
2、lambda 表达式
14、什么是竞态条件？举个例子说明。

当两个线程竞争同一资源时，如果对资源的访问顺序敏感，就称存在竞态条件。
15、JRE、JDK、JVM 及 JIT 之间有什么不同

JVM（java 虚拟机）：JVM 处理字节码文件，让 java 语言实现跨平台。
JRE（java运行时环境）：JRE 是 JVM 的一个超集。
JDK（java开发工具箱）：JDK 包含了 JRE 和 Java的开发环境。
JIT（即时编译器）：即时编译器是种特殊的编译器，它通过把字节码变成机器码来提高JVM的效率。
16、MVC 的各个部分都用哪些技术来实现？如何实现？

Model层：可以用普通的 JavaBean 来实现。
View层：可以用 JSP 或者 JS 来实现。
Controller层：可以用 Struts2 或者 Spring MVC 来实现。
17、RPC 通信 和 RMI 区别

RPC（remote procedure call），即远程过程调用。
RMI（remote method invocation），即远程方法调用。
两者的实质都是调用远程的服务，只不过RPC是用面向过程的语言如C语言实现，而RMI是用面向对象的语言如Java实现。
18、什么是 Web Service（Web服务）

Web Service 就是通过网络调用其他网站的资源。
19、JSWDL 开发包的介绍。JAXP、JAXM的解释。SOAP、UDDI、WSDL解释。

JAXP：(Java API for XML Parsing) 定义了在Java中使用DOM, SAX, XSLT的通用的接口。这样在你的程序中你只要使用这些通用的接口，当你需要改变具体的实现时候也不需要修改代码。
JAXM：(Java API for XML Messaging) 是为SOAP通信提供访问方法和传输机制的API。
SOAP：即简单对象访问协议(Simple Object Access Protocol)，它是用于交换XML编码信息的轻量级协议。
UDDI：UDDI的目的是为电子商务建立标准；UDDI是一套基于Web的、分布式的、为Web Service提供的、信息注册中心的实现标准规范，同时也包含一组使企业能将自身提供的Web Service注册，以使别的企业能够发现的访问协议的实现标准。
WSDL：是一种 XML 格式，用于将网络服务描述为一组端点，这些端点对包含面向文档信息或面向过程信息的消息进行操作。这种格式首先对操作和消息进行抽象描述，然后将其绑定到具体的网络协议和消息格式上以定义端点。相关的具体端点即组合成为抽象端点（服务）。
20、WEB容器主要有哪些功能？并请列出一些常见的WEB容器名字。

WEB容器的功能：通信支持、管理servlet的生命周期、多线程支持、jsp支持（将jsp翻译成java）
常见的WEB容器：Tomcat、WebLogic、WebSphere
21、一个".java"源文件中是否可以包含多个类（不是内部类）？有什么限制

可以，一个“.java”源文件里面可以包含多个类，但是只允许有一个public类，并且类名必须和文件名一致。
22、简单说说你了解的类加载器。是否实现过类加载器

类加载器负责加载Java类的字节码到Java虚拟机中。
自己实现类加载器一般需要继承 java.lang.ClassLoader ，覆写 findClass(String name)方法。
23、解释一下什么叫AOP（面向切面编程）

AOP（Aspect Oriented Programming），即面向切面编程，它利用一种称为"横切"的技术，剖解开封装的对象内部，并将那些影响了多个类的公共行为封装到一个可重用模块，并将其命名为"Aspect"，即切面。所谓"切面"，简单说就是将那些与业务无关，却为业务模块所共同调用的逻辑封装起来，便于减少系统的重复代码，降低模块之间的耦合度，并有利于未来的可操作性和可维护性。
24、请简述 Servlet 的生命周期及其相关的方法

①实例化阶段：服务器对Servlet进行实例化，调用Servlet的构造方法
②初始化阶段：服务器调用Servlet的init方法进行初始化（只在第一次请求时调用）。
③请求处理阶段：服务器调用Servlet的service方法，然后根据请求方式调用相应的doXXX方法。
④服务终止阶段：服务器调用Servlet的destroy方法销毁Servlet实例
25、请简述一下 Ajax 的原理及实现步骤

Ajax 即“Asynchronous Javascript And XML”（异步 JavaScript 和 XML），通过在后台与服务器进行少量数据交换，可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。
原理：HTTP协议的异步通信
实现步骤：
1、创建一个XMLHttpRequest对象
2、调用该对象的open方法
3、设置回调函数
26、简单描述 Struts 的主要功能

1、获取表单内容，并组织生成参数对象
2、根据请求的参数转发请求给适当的控制器
3、在控制器中调用业务接口
4、将业务接口返回的结果包装起来发送给指定的视图，并由视图完成处理结果的展现
5、做一些简单的校验或是国际化工作
27、什么是 N 层架构

N层架构是一种软件抽象的层次结构，是对复杂软件的一种纵向切分，每一层次中完成同一类型的操作，以便将各种代码根据其完成的使命来进行分割，以降低软件的复杂度，提高其可维护性。一般来说，层次之间是向下依赖的，下层代码未确定其接口前，上层代码是无法开发的，下层代码接口的变化将使上层的代码一起变化。
28、什么是 CORBA？用途是什么

CORBA（Common Object Request Broker Architecture 公共对象请求代理体系结构）是由OMG组织制订的一种标准的面向对象应用程序体系规范。
用途：
1、存取来自现行桌面应用程序的分布信息和资源；
2、使现有业务数据和系统成为可供利用的网络资源；
3、为某一特定业务用的定制的功能和能力来增强现行桌面工具和应用程序；
4、改变和发展基于网络的系统以反映新的拓扑结构或新资源；
29、什么是 Java虚拟机？为什么Java被称作是“平台无关的编程语言”

Java虚拟机是执行字节码文件（.class）的虚拟机进程。
因为不同的平台装有不同的Java虚拟机，它们能够将相同的.class文件，解释成不同平台所需要的机器码。所以Java被称为平台无关的编程语言。
30、什么是正则表达式？用途是什么？哪个包使用正则表达式来实现模式匹配

正则表达式：是对字符串操作的一种逻辑公式，就是用事先定义好的一些特定字符、及这些特定字符的组合，组成一个“规则字符串”，用这个“规则字符串”来表达对字符串的过滤逻辑。
用途包括：
1、字符串匹配
2、指定字符串替换
3、指定字符串查找
4、字符串分割
正则表达式的包：java.util.regex包
31、什么是懒加载（Lazy Loading）

懒加载：即为延迟加载，顾名思义就是在需要的时候才加载，这样做效率会比较低，但是占用内存低。
32、什么是尾递归，为什么需要尾递归

如果一个函数中所有递归形式的调用都出现在函数的末尾，我们称这个递归函数是尾递归的。
为什么需要尾递归：尾递归和普通递归的不同点在对内存的占用，普通递归创建stack后内存减少，而尾递归只会占用恒量的内存。
33、什么是控制反转（Inversion of Control）与依赖注入（Dependency Injection）

控制反转：是指将创建对象的功能交给Spring容器，在我们需要使用对象的时候不需要自己创建，可以直接从容器中获取。
依赖注入：动态的向某个对象提供它所依赖的其他对象。
关键字
finalize
1、什么是finalize() 方法

Java 可以使用 finalize() 方法在垃圾收集器将对象从内存中清除出去之前做一些必要的清理工作。
2、finalize()方法什么时候被调用

这个方法是由垃圾收集器在确定这个对象没有被引用时对这个对象调用的。
3、析构函数(finalization) 的目的是什么

析构函数的目的是：在清除对象前，完成一些清理工作，比如：释放内存等。
4、final 和 finalize 的区别

final关键字可以用于类、方法、变量前，用来表示该类、方法、变量具有不可变的特性。

finalize方法用于回收资源，可以为任何一个类添加finalize方法。该方法将在垃圾回收器清除对象之前调用。
final
1、final关键字有哪些用法

用来修饰变量，表示该变量的值无法改变；
用来修饰方法，表示该方法无法被重写；
用来修饰类，表示该类无法被继承。
2、final 与 static 关键字可以用于哪里？它们的作用是什么

final：
用来修饰变量，表示该变量的值无法改变；
用来修饰方法，表示该方法无法被重写；
用来修饰类，表示该类无法被继承。

static：
静态变量，可以用类名直接访问
静态方法，可以通过类名直接调用
3、final, finally, finalize的区别

4、final、finalize 和 finally 的不同之处？

5、能否在运行时向 static final 类型的赋值

6、使用final关键字修饰一个变量时，是引用不能变，还是引用的对象不能变

7、一个类被声明为final类型，表示了什么意思

8、throws, throw, try, catch, finally分别代表什么意义

9、Java 有几种修饰符？分别用来修饰什么

volatile
1、volatile 修饰符有过什么实践

2、volatile 变量是什么？volatile 变量和 atomic 变量有什么不同

3、volatile 类型变量提供什么保证？能使得一个非原子操作变成原子操作吗

4、能创建 volatile 数组吗？

5、transient变量有什么特点

6、super什么时候使用

7、public static void 写成 static public void会怎样

8、说明一下public static void main(String args[])这段声明里每个关键字的作用

9、请说出作用域public, private, protected, 以及不写时的区别

10、sizeof 是Java 的关键字吗

static
1、static class 与 non static class的区别

2、static 关键字是什么意思？Java中是否可以覆盖(override)一个private或者是static的方法

3、静态类型有什么特点

4、main() 方法为什么必须是静态的？能不能声明 main() 方法为非静态

5、是否可以从一个静态（static）方法内部发出对非静态（non-static）方法的调用

6、静态变量在什么时候加载？编译期还是运行期？静态代码块加载的时机呢

7、成员方法是否可以访问静态变量？为什么静态方法不能访问成员变量

switch
1、switch 语句中的表达式可以是什么类型数据

2、switch 是否能作用在byte 上，是否能作用在long 上，是否能作用在String上

3、while 循环和 do 循环有什么不同

操作符
1、&操作符和&&操作符有什么区别?

2、a = a + b 与 a += b 的区别？

3、逻辑操作符 (&,|,^)与条件操作符(&&,||)的区别

4、3*0.1 == 0.3 将会返回什么？true 还是 false？

5、loat f=3.4; 是否正确？

6、short s1 = 1; s1 = s1 + 1;有什么错?

数据结构
基础类型(Primitives)
1、基础类型(Primitives)与封装类型(Wrappers)的区别在哪里

2、简述九种基本数据类型的大小，以及他们的封装类

3、int 和 Integer 哪个会占用更多的内存？ int 和 Integer 有什么区别？parseInt()函数在什么时候使用到

4、float和double的默认值是多少

5、如何去小数四舍五入保留小数点后两位

6、char 型变量中能不能存贮一个中文汉字，为什么

类型转换
1、怎样将 bytes 转换为 long 类型

2、怎么将 byte 转换为 String

3、如何将数值型字符转换为数字

4、我们能将 int 强制转换为 byte 类型的变量吗？如果该值大于 byte 类型的范围，将会出现什么现象

5、能在不进行强制转换的情况下将一个 double 值赋值给 long 类型的变量吗

6、类型向下转换是什么

数组
1、如何权衡是使用无序的数组还是有序的数组

2、怎么判断数组是 null 还是为空

3、怎么打印数组？ 怎样打印数组中的重复元素

4、Array 和 ArrayList有什么区别？什么时候应该使用Array而不是ArrayList

5、数组和链表数据结构描述，各自的时间复杂度

6、数组有没有length()这个方法? String有没有length()这个方法

队列
1、队列和栈是什么，列出它们的区别

2、BlockingQueue是什么

3、简述 ConcurrentLinkedQueue LinkedBlockingQueue 的用处和不同之处。

4、ArrayList、Vector、LinkedList 的存储性能和特性？

5、String 和 StringBuffer 的区别？

6、ByteBuffer 与 StringBuffer 有什么区别？

HashMap
1、HashMap的工作原理是什么

2、内部的数据结构是什么

3、HashMap 的 table的容量如何确定？loadFactor 是什么？ 该容量如何变化？这种变化会带来什么问题？

4、HashMap 实现的数据结构是什么？如何实现

5、HashMap 和 HashTable、ConcurrentHashMap 的区别

6、HashMap的遍历方式及效率

7、HashMap、LinkedMap、TreeMap的区别

8、如何决定选用HashMap还是TreeMap

9、如果HashMap的大小超过了负载因子(load factor)定义的容量，怎么办

10、HashMap 是线程安全的吗？并发下使用的 Map 是什么，它们内部原理分别是什么，比如存储方式、 hashcode、扩容、 默认容量等

HashSet
1、HashSet和TreeSet有什么区别

2、HashSet 内部是如何工作的

3、WeakHashMap 是怎么工作的？

Set
1、Set 里的元素是不能重复的，那么用什么方法来区分重复与否呢？是用 == 还是 equals()？ 它们有何区别?

2、TreeMap：TreeMap 是采用什么树实现的？TreeMap、HashMap、LindedHashMap的区别。TreeMap和TreeSet在排序时如何比较元素？Collections工具类中的sort()方法如何比较元素？

3、TreeSet：一个已经构建好的 TreeSet，怎么完成倒排序。

4、EnumSet 是什么

Hash算法
1、Hashcode 的作用

2、简述一致性 Hash 算法

3、有没有可能 两个不相等的对象有相同的 hashcode？当两个对象 hashcode 相同怎么办？如何获取值对象

4、为什么在重写 equals 方法的时候需要重写 hashCode 方法？equals与 hashCode 的异同点在哪里

5、a.hashCode() 有什么用？与 a.equals(b) 有什么关系

6、hashCode() 和 equals() 方法的重要性体现在什么地方

7、Object：Object有哪些公用方法？Object类hashcode,equals 设计原则？ sun为什么这么设计？Object类的概述

8、如何在父类中为子类自动完成所有的 hashcode 和 equals 实现？这么做有何优劣。

9、可以在 hashcode() 中使用随机数字吗？

LinkedHashMap
1、LinkedHashMap 和 PriorityQueue 的区别是什么

List
1、List, Set, Map三个接口，存取元素时各有什么特点

2、List, Set, Map 是否继承自 Collection 接口

3、遍历一个 List 有哪些不同的方式

LinkedList
1、LinkedList 是单向链表还是双向链表

2、LinkedList 与 ArrayList 有什么区别

3、描述下 Java 中集合（Collections），接口（Interfaces），实现（Implementations）的概念。LinkedList 与 ArrayList 的区别是什么？

4、插入数据时，ArrayList, LinkedList, Vector谁速度较快？

ArrayList
1、ArrayList 和 HashMap 的默认大小是多数

2、ArrayList 和 LinkedList 的区别，什么时候用 ArrayList？

3、ArrayList 和 Set 的区别？

4、ArrayList, LinkedList, Vector的区别

5、ArrayList是如何实现的，ArrayList 和 LinkedList 的区别

6、ArrayList如何实现扩容

7、Array 和 ArrayList 有何区别？什么时候更适合用Array

8、说出ArraList,Vector, LinkedList的存储性能和特性

Map
1、Map, Set, List, Queue, Stack

2、Map 接口提供了哪些不同的集合视图

3、为什么 Map 接口不继承 Collection 接口

Collections
1、介绍Java中的Collection FrameWork。集合类框架的基本接口有哪些

2、Collections类是什么？Collection 和 Collections的区别？Collection、Map的实现

3、集合类框架的最佳实践有哪些

4、为什么 Collection 不从 Cloneable 和 Serializable 接口继承

5、说出几点 Java 中使用 Collections 的最佳实践？

6、Collections 中 遗留类 (HashTable、Vector) 和 现有类的区别

7、什么是 B+树，B-树，列出实际的使用场景

接口
1、Comparator 与 Comparable 接口是干什么的？列出它们的区别

对象
拷贝(clone)
1、如何实现对象克隆

2、深拷贝和浅拷贝区别

3、深拷贝和浅拷贝如何实现激活机制

4、写clone()方法时，通常都有一行代码，是什么

比较
1、在比较对象时，"==" 运算符和 equals 运算有何区别

2、如果要重写一个对象的equals方法，还要考虑什么

3、两个对象值相同(x.equals(y) == true)，但却可有不同的hash code，这句话对不对

构造器
1、构造器链是什么

2、创建对象时构造器的调用顺序

不可变对象
1、什么是不可变象（immutable object）

2、为什么 Java 中的 String 是不可变的（Immutable）

3、如何构建不可变的类结构？关键点在哪里

4、能创建一个包含可变对象的不可变对象吗

5、如何对一组对象进行排序

方法
1、构造器（constructor）是否可被重写（override）

2、方法可以同时即是 static 又是 synchronized 的吗

3、abstract 的 method是否可同时是 static，是否可同时是 native，是否可同时是synchronized

4、Java支持哪种参数传递类型

5、一个对象被当作参数传递到一个方法，是值传递还是引用传递

6、当一个对象被当作参数传递到一个方法后，此方法可改变这个对象的属性，并可返回变化后的结果，那么这里到底是值传递还是引用传递

7、我们能否重载main()方法

8、如果main方法被声明为private会怎样

GC
概念
1、GC是什么？为什么要有GC

2、什么时候会导致垃圾回收

3、GC是怎么样运行的

4、新老以及永久区是什么

5、GC 有几种方式？怎么配置

6、什么时候一个对象会被GC？ 如何判断一个对象是否存活

7、System.gc() Runtime.gc()会做什么事情？ 能保证 GC 执行吗

8、垃圾回收器可以马上回收内存吗？有什么办法主动通知虚拟机进行垃圾回收？

9、Minor GC 、Major GC、Young GC 与 Full GC分别在什么时候发生

10、垃圾回收算法的实现原理

11、如果对象的引用被置为null，垃圾收集器是否会立即释放对象占用的内存？

12、垃圾回收的最佳做法是什么

GC收集器有哪些
1、垃圾回收器的基本原理是什么？

2、串行(serial)收集器和吞吐量(throughput)收集器的区别是什么

3、Serial 与 Parallel GC之间的不同之处

4、CMS 收集器 与 G1 收集器的特点与区别

5、CMS垃圾回收器的工作过程

6、JVM 中一次完整的 GC 流程是怎样的？ 对象如何晋升到老年代

7、吞吐量优先和响应优先的垃圾收集器选择

GC策略
1、举个实际的场景，选择一个GC策略

2、JVM的永久代中会发生垃圾回收吗

收集方法
1、标记清除、标记整理、复制算法的原理与特点？分别用在什么地方

2、如果让你优化收集方法，有什么思路

JVM
参数
1、说说你知道的几种主要的jvm 参数

2、-XX:+UseCompressedOops 有什么作用

类加载器(ClassLoader)
1、Java 类加载器都有哪些

2、JVM如何加载字节码文件

内存管理
1、JVM内存分哪几个区，每个区的作用是什么

2、一个对象从创建到销毁都是怎么在这些部分里存活和转移的

3、解释内存中的栈(stack)、堆(heap)和方法区(method area)的用法

4、JVM中哪个参数是用来控制线程的栈堆栈小

5、简述内存分配与回收策略

6、简述重排序，内存屏障，happen-before，主内存，工作内存

7、Java中存在内存泄漏问题吗？请举例说明

8、简述 Java 中软引用（SoftReferenc）、弱引用（WeakReference）和虚引用

9、内存映射缓存区是什么

10、jstack，jstat，jmap，jconsole怎么用

11、32 位 JVM 和 64 位 JVM 的最大堆内存分别是多数？32 位和 64 位的 JVM，int 类型变量的长度是多数？

12、怎样通过 Java 程序来判断 JVM 是 32 位 还是 64 位

13、JVM自身会维护缓存吗？是不是在堆中进行对象分配，操作系统的堆还是JVM自己管理堆

14、什么情况下会发生栈内存溢出

15、双亲委派模型是什么

多线程
基本概念
1、什么是线程

2、多线程的优点

3、多线程的几种实现方式

4、用 Runnable 还是 Thread

5、什么是线程安全

6、Vector, SimpleDateFormat 是线程安全类吗

7、什么 Java 原型不是线程安全的

8、哪些集合类是线程安全的

9、多线程中的忙循环是什么

10、如何创建一个线程

11、编写多线程程序有几种实现方式

12、什么是线程局部变量

13、线程和进程有什么区别？进程间如何通讯，线程间如何通讯

14、什么是多线程环境下的伪共享（false sharing）

15、同步和异步有何异同，在什么情况下分别使用他们？举例说明

Current
1、ConcurrentHashMap 和 Hashtable的区别

2、ArrayBlockingQueue, CountDownLatch的用法

3、ConcurrentHashMap的并发度是什么

4、CyclicBarrier 和 CountDownLatch有什么不同？各自的内部原理和用法是什么

5、Semaphore的用法

Thread
1、启动一个线程是调用 run() 还是 start() 方法？start() 和 run() 方法有什么区别

2、调用start()方法时会执行run()方法，为什么不能直接调用run()方法

3、sleep() 方法和对象的 wait() 方法都可以让线程暂停执行，它们有什么区别

4、yield方法有什么作用？sleep() 方法和 yield() 方法有什么区别

5、Java 中如何停止一个线程

6、stop() 和 suspend() 方法为何不推荐使用

7、如何在两个线程间共享数据

8、如何强制启动一个线程

9、如何让正在运行的线程暂停一段时间

10、什么是线程组，为什么在Java中不推荐使用

11、你是如何调用 wait（方法的）？使用 if 块还是循环？为什么

生命周期
1、有哪些不同的线程生命周期

2、线程状态，BLOCKED 和 WAITING 有什么区别

3、画一个线程的生命周期状态图

4、ThreadLocal 用途是什么，原理是什么，用的时候要注意什么

ThreadPool
1、线程池是什么？为什么要使用它

2、如何创建一个Java线程池

3、ThreadPool用法与优势

4、提交任务时，线程池队列已满时会发会生什么

5、newCache 和 newFixed 有什么区别？简述原理。构造函数的各个参数的含义是什么，比如 coreSize, maxsize 等

6、线程池的实现策略

7、线程池的关闭方式有几种，各自的区别是什么

8、线程池中submit() 和 execute()方法有什么区别？

线程调度
1、Java中用到的线程调度算法是什么

2、什么是多线程中的上下文切换

3、你对线程优先级的理解是什么

4、什么是线程调度器 (Thread Scheduler) 和时间分片 (Time Slicing)

线程同步
1、请说出你所知的线程同步的方法

2、synchronized 的原理是什么

3、synchronized 和 ReentrantLock 有什么不同

4、什么场景下可以使用 volatile 替换 synchronized

5、有T1，T2，T3三个线程，怎么确保它们按顺序执行？怎样保证T2在T1执行完后执行，T3在T2执行完后执行

6、同步块内的线程抛出异常会发生什么

7、当一个线程进入一个对象的 synchronized 方法A 之后，其它线程是否可进入此对象的 synchronized 方法B

8、使用 synchronized 修饰静态方法和非静态方法有什么区别

9、如何从给定集合那里创建一个 synchronized 的集合

锁
1、Java Concurrency API 中 的 Lock 接口是什么？对比同步它有什么优势

2、Lock 与 Synchronized 的区别？Lock 接口比 synchronized 块的优势是什么

3、ReadWriteLock是什么？

4、锁机制有什么用

5、什么是乐观锁（Optimistic Locking）？如何实现乐观锁？如何避免ABA问题

6、解释以下名词：重排序，自旋锁，偏向锁，轻量级锁，可重入锁，公平锁，非公平锁，乐观锁，悲观锁

7、什么时候应该使用可重入锁

8、简述锁的等级方法锁、对象锁、类锁

9、Java中活锁和死锁有什么区别？

10、什么是死锁(Deadlock)？导致线程死锁的原因？如何确保 N 个线程可以访问 N 个资源同时又不导致死锁

11、死锁与活锁的区别，死锁与饥饿的区别

12、怎么检测一个线程是否拥有锁

13、如何实现分布式锁

14、有哪些无锁数据结构，他们实现的原理是什么

15、读写锁可以用于什么应用场景

16、Executors类是什么？ Executor和Executors的区别

17、什么是Java线程转储(Thread Dump)，如何得到它

18、如何在Java中获取线程堆栈

19、说出 3 条在 Java 中使用线程的最佳实践

20、在线程中你怎么处理不可捕捉异常

21、实际项目中使用多线程举例。你在多线程环境中遇到的常见的问题是什么？你是怎么解决它的

22、请说出与线程同步以及线程调度相关的方法

23、程序中有3个 socket，需要多少个线程来处理

24、假如有一个第三方接口，有很多个线程去调用获取数据，现在规定每秒钟最多有 10 个线程同时调用它，如何做到

25、如何在 Windows 和 Linux 上查找哪个线程使用的 CPU 时间最长

26、如何确保 main() 方法所在的线程是 Java 程序最后结束的线程

27、非常多个线程（可能是不同机器），相互之间需要等待协调才能完成某种工作，问怎么设计这种协调方案

28、你需要实现一个高效的缓存，它允许多个用户读，但只允许一个用户写，以此来保持它的完整性，你会怎样去实现它

异常
基本概念
1、Error 和 Exception有什么区别

2、UnsupportedOperationException是什么

3、NullPointerException 和 ArrayIndexOutOfBoundException 之间有什么相同之处

4、什么是受检查的异常，什么是运行时异常

5、运行时异常与一般异常有何异同

6、简述一个你最常见到的runtime exception(运行时异常)

finally
1、finally关键词在异常处理中如何使用

2、如果执行finally代码块之前方法返回了结果，或者JVM退出了，finally块中的代码还会执行吗

3、try里有return，finally还执行么？那么紧跟在这个try后的finally {}里的code会不会被执行，什么时候被执行，在return前还是后

4、在什么情况下，finally语句不会执行

5、throw 和 throws 有什么区别？

6、OOM你遇到过哪些情况？你是怎么搞定的？

7、SOF你遇到过哪些情况？

8、既然我们可以用RuntimeException来处理错误，那么你认为为什么Java中还存在检查型异常

9、当自己创建异常类的时候应该注意什么

10、导致空指针异常的原因

11、异常处理 handle or declare 原则应该如何理解

12、怎么利用 JUnit 来测试一个方法的异常

13、catch块里别不写代码有什么问题

14、你曾经自定义实现过异常吗？怎么写的

15、什么是 异常链

16、在try块中可以抛出异常吗

JDBC
1、通过 JDBC 连接数据库有哪几种方式

2、阐述 JDBC 操作数据库的基本步骤

3、JDBC 中如何进行事务处理

4、什么是 JdbcTemplate

5、什么是 DAO 模块

6、使用 JDBC 操作数据库时，如何提升读取数据的性能？如何提升更新数据的性能

7、列出 5 个应该遵循的 JDBC 最佳实践

IO
File
1、File类型中定义了什么方法来创建一级目录

2、File类型中定义了什么方法来判断一个文件是否存在

流
1、为了提高读写性能，可以采用什么流

2、Java中有几种类型的流

3、JDK 为每种类型的流提供了一些抽象类以供继承，分别是哪些类

4、对文本文件操作用什么I/O流

5、对各种基本数据类型和String类型的读写，采用什么流

6、能指定字符编码的 I/O 流类型是什么

序列化
1、什么是序列化？如何实现 Java 序列化及注意事项

2、Serializable 与 Externalizable 的区别

Socket
1、socket 选项 TCP NO DELAY 是指什么

2、Socket 工作在 TCP/IP 协议栈是哪一层

3、TCP、UDP 区别及 Java 实现方式

4、说几点 IO 的最佳实践

5、直接缓冲区与非直接缓冲器有什么区别？

6、怎么读写 ByteBuffer？ByteBuffer 中的字节序是什么

7、当用System.in.read(buffer)从键盘输入一行n个字符后，存储在缓冲区buffer中的字节数是多少

8、如何使用扫描器类（Scanner Class）令牌化

面向对象编程（OOP）
1、解释下多态性（polymorphism），封装性（encapsulation），内聚（cohesion）以及耦合（coupling）

2、多态的实现原理

3、封装、继承和多态是什么

4、对象封装的原则是什么?

类
1、获得一个类的类对象有哪些方式

2、重载（Overload）和重写（Override）的区别。重载的方法能否根据返回类型进行区分？

3、说出几条 Java 中方法重载的最佳实践

抽象类
1、抽象类和接口的区别

2、抽象类中是否可以有静态的main方法

3、抽象类是否可实现(implements)接口

4、抽象类是否可继承具体类(concrete class)

匿名类（Anonymous Inner Class）
1、匿名内部类是否可以继承其它类？是否可以实现接口

内部类
1、内部类分为几种

2、内部类可以引用它的包含类（外部类）的成员吗

3、请说一下 Java 中为什么要引入内部类？还有匿名内部类

继承
1、继承（Inheritance）与聚合（Aggregation）的区别在哪里

2、继承和组合之间有什么不同

3、为什么类只能单继承，接口可以多继承

4、存在两个类，B 继承 A，C 继承 B，能将 B 转换为 C 么？如 C = (C) B

5、如果类 a 继承类 b，实现接口c，而类 b 和接口 c 中定义了同名变量，请问会出现什么问题

接口
1、接口是什么

2、接口是否可继承接口

3、为什么要使用接口而不是直接使用具体类？接口有什么优点

泛型
1、泛型的存在是用来解决什么问题

2、泛型的常用特点

3、List能否转为List

工具类
日历
1、Calendar Class的用途

2、如何在Java中获取日历类的实例

3、解释一些日历类中的重要方法

4、GregorianCalendar 类是什么

5、SimpleTimeZone 类是什么

6、Locale类是什么

7、如何格式化日期对象

8、如何添加小时(hour)到一个日期对象(Date Objects)

9、如何将字符串 YYYYMMDD 转换为日期

Math
1、Math.round()什么作用？Math.round(11.5) 等于多少？Math.round(-11.5)等于多少？

XML
1、XML文档定义有几种形式？它们之间有何本质区别？解析XML文档有哪几种方式？DOM 和 SAX 解析器有什么不同？

2、Java解析XML的方式

3、用 jdom 解析 xml 文件时如何解决中文问题？如何解析

4、你在项目中用到了 XML 技术的哪些方面？如何实现

动态代理
1、描述动态代理的几种实现方式，分别说出相应的优缺点

设计模式
1、什么是设计模式（Design Patterns）？你用过哪种设计模式？用在什么场合

2、你知道哪些商业级设计模式？

3、哪些设计模式可以增加系统的可扩展性

单例模式
1、除了单例模式，你在生产环境中还用过什么设计模式？

2、写 Singleton 单例模式

3、单例模式的双检锁是什么

4、如何创建线程安全的 Singleton

5、什么是类的单例模式

6、写出三种单例模式实现

适配器模式
1、适配器模式是什么？什么时候使用

2、适配器模式和代理模式之前有什么不同

3、适配器模式和装饰器模式有什么区别

4、什么时候使用享元模式

5、什么时候使用组合模式

6、什么时候使用访问者模式

7、什么是模板方法模式

8、请给出1个符合开闭原则的设计模式的例子

开放问题
1、用一句话概括 Web 编程的特点

2、Google是如何在一秒内把搜索结果返回给用户

3、哪种依赖注入方式你建议使用，构造器注入，还是 Setter方法注入

4、树（二叉或其他）形成许多普通数据结构的基础。请描述一些这样的数据结构以及何时可以使用它们

5、某一项功能如何设计

6、线上系统突然变得异常缓慢，你如何查找问题

7、什么样的项目不适合用框架

8、新浪微博是如何实现把微博推给订阅者

9、简要介绍下从浏览器输入 URL 开始到获取到请求界面之后 Java Web 应用中发生了什么

10、请你谈谈SSH整合

11、高并发下，如何做到安全的修改同一行数据

12、12306网站的订票系统如何实现，如何保证不会票不被超卖

13、网站性能优化如何优化的

14、聊了下曾经参与设计的服务器架构

15、请思考一个方案，实现分布式环境下的 countDownLatch

16、请思考一个方案，设计一个可以控制缓存总体大小的自动适应的本地缓存

17、在你的职业生涯中，算得上最困难的技术挑战是什么

18、如何写一篇设计文档，目录是什么

19、大写的O是什么？举几个例子

20、编程中自己都怎么考虑一些设计原则的，比如开闭原则，以及在工作中的应用

21、解释一下网络应用的模式及其特点

22、设计一个在线文档系统，文档可以被编辑，如何防止多人同时对同一份文档进行编辑更新

23、说出数据连接池的工作机制是什么

24、怎么获取一个文件中单词出现的最高频率

25、描述一下你最常用的编程风格

26、如果有机会重新设计你们的产品，你会怎么做

27、如何搭建一个高可用系统

28、如何启动时不需输入用户名与密码

29、如何在基于Java的Web项目中实现文件上传和下载

30、如何实现一个秒杀系统，保证只有几位用户能买到某件商品。

31、如何实现负载均衡，有哪些算法可以实现

32、如何设计一个购物车？想想淘宝的购物车如何实现的

33、如何设计一套高并发支付方案，架构如何设计

34、如何设计建立和保持 100w 的长连接

35、如何避免浏览器缓存。

36、如何防止缓存雪崩

37、如果AB两个系统互相依赖，如何解除依

38、如果有人恶意创建非法连接，怎么解决

39、如果有几十亿的白名单，每天白天需要高并发查询，晚上需要更新一次，如何设计这个功能

40、如果系统要使用超大整数（超过long长度范围），请你设计一个数据结构来存储这种超大型数字以及设计一种算法来实现超大整数加法运算）

41、如果要设计一个图形系统，请你设计基本的图形元件(Point,Line,Rectangle,Triangle)的简单实现

42、如果让你实现一个并发安全的链表，你会怎么做

43、应用服务器与WEB 服务器的区别？应用服务器怎么监控性能，各种方式的区别？你使用过的应用服务器优化技术有哪些

44、大型网站在架构上应当考虑哪些问题

45、有没有处理过线上问题？出现内存泄露，CPU利用率标高，应用无响应时如何处理的

46、最近看什么书，印象最深刻的是什么

47、描述下常用的重构技巧

48、你使用什么版本管理工具？分支（Branch）与标签（Tag）之间的区别在哪里

49、你有了解过存在哪些反模式（Anti-Patterns）吗

50、你用过的网站前端优化的技术有哪些

51、如何分析Thread dump

52、你如何理解AOP中的连接点（Joinpoint）、切点（Pointcut）、增强（Advice）、引介（Introduction）、织入（Weaving）、切面（Aspect）这些概念

53、你是如何处理内存泄露或者栈溢出问题的

54、你们线上应用的 JVM 参数有哪些

55、怎么提升系统的QPS和吞吐量

知识面
1、解释什么是 MESI 协议(缓存一致性)

2、谈谈 reactor 模型

3、Java 9 带来了怎样的新功能

4、Java 与 C++ 对比，C++ 或 Java 中的异常处理机制的简单原理和应用

5、简单讲讲 Tomcat 结构，以及其类加载器流程

6、虚拟内存是什么

7、阐述下 SOLID 原则

8、请简要讲一下你对测试驱动开发（TDD）的认识

9、CDN实现原理

10、Maven 和 ANT 有什么区别

11、UML中有哪些常用的图

Linux
1、Linux 下 IO 模型有几种，各自的含义是什么。

2、Linux 系统下你关注过哪些内核参数，说说你知道的

3、Linux 下用一行命令查看文件的最后五行

4、平时用到哪些 Linux 命令

5、用一行命令输出正在运行的 Java 进程

6、使用什么命令来确定是否有 Tomcat 实例运行在机器上

7、什么是 N+1 难题

8、什么是 paxos 算法

9、什么是 restful，讲讲你理解的 restful

10、什么是 zab 协议

11、什么是领域模型(domain model)？贫血模型(anaemic domain model) 和充血模型(rich domain model)有什么区别

12、什么是领域驱动开发（Domain Driven Development）

13、介绍一下了解的 Java 领域的 Web Service 框架

14、Web Server、Web Container 与 Application Server 的区别是什么

15、微服务（MicroServices）与巨石型应用（Monolithic Applications）之间的区别在哪里

16、描述 Cookie 和 Session 的作用，区别和各自的应用范围，Session工作原理

17、你常用的持续集成（Continuous Integration）、静态代码分析（Static Code Analysis）工具有哪些

18、简述下数据库正则化（Normalizations）

19、KISS,DRY,YAGNI 等原则是什么含义

20、分布式事务的原理，优缺点，如何使用分布式事务？

21、布式集群下如何做到唯一序列号

网络
1、HTTPS 的加密方式是什么，讲讲整个加密解密流程

2、HTTPS和HTTP的区别

3、HTTP连接池实现原理

4、HTTP集群方案

5、Nginx、lighttpd、Apache三大主流 Web服务器的区别

6、是否看过框架的一些代码

7、持久层设计要考虑的问题有哪些？你用过的持久层框架有哪些

8、数值提升是什么

9、你能解释一下里氏替换原则吗

10、你是如何测试一个应用的？知道哪些测试框架

11、传输层常见编程协议有哪些？并说出各自的特点

编程题
计算加班费
加班10小时以下加班费是时薪的1.5倍。加班10小时或以上，按4元/时算。提示：（一个月工作26天，一天正常工作8小时）

1、计算1000月薪，加班9小时的加班费

2、计算2500月薪，加班11小时的加班费

3、计算1000月薪，加班15小时的加班费

卖东西
一家商场有红苹果和青苹果出售。（红苹果5元/个，青苹果4元/个）。

1、模拟一个进货。红苹果跟青苹果各进200个。

2、模拟一个出售。红苹果跟青苹果各买出10个。每卖出一个苹果需要进行统计。

提示：一个苹果是一个单独的实体。

日期提取
有这样一个时间字符串：2008-8-8 20:08:08 ， 请编写能够匹配它的正则表达式，并编写Java代码将日期后面的时分秒提取出来，即：20:08:08

线程
1、设计4个线程，其中两个线程每次对j增加1，另外两个线程对j每次减少1。写出程序。

2、用Java写一个多线程程序，如写四个线程，二个加1，二个对一个变量减一，输出

3、wait-notify 写一段代码来解决生产者-消费者问题

数字
1、判断101-200之间有多少个素数，并输出所有素数

2、用最有效率的方法算出2乘以17等于多少

3、有 1 亿个数字，其中有 2 个是重复的，快速找到它，时间和空间要最优

4、2 亿个随机生成的无序整数,找出中间大小的值

5、10 亿个数字里里面找最小的 10 个

6、1到1亿的自然数，求所有数的拆分后的数字之和，如286 拆分成2、8、6，如1到11拆分后的数字之和 => 1 + ... + 9 + 1 + 0 + 1 + 1

7、一个数如果恰好等于它的因子之和，这个数就称为 “完数“。例如6=1＋2＋3.编程 找出1000以内的所有完数

8、一个数组中所有的元素都出现了三次，只有一个元素出现了一次找到这个元素

9、一球从100米高度自由落下，每次落地后反跳回原高度的一半；再落下，求它在 第10次落地时，共经过多少米？第10次反弹多高？

10、求100－1000内质数的和

11、求1到100的和的平均数

12、求s=a+a+aaa+aaaa+aa…a的值，其中a是一个数字。例如2+22+222+2222+22222(此时共有5个数相加)，几个数相加有键盘控制。 求出1到100的和

13、算出1到40的质数，放进数组里

① 显示放组里的数

② 找出第[5]个数

③ 删除第[9]个数，再显示删除后的第[9]个

14、有 3n+1 个数字，其中 3n 个中是重复的，只有 1 个是不重复的，怎么找出来。

15、有一组数1.1.2.3.5.8.13.21.34。写出程序随便输入一个数就能给出和前一组数字同规律的头5个数

16、计算指定数字的阶乘

17、开发 Fizz Buzz

18、给定一个包含 N 个整数的数组，找出丢失的整数

19、一个排好序的数组，找出两数之和为m的所有组合

20、将一个正整数分解质因数。例如：输入90,打印出90=2*3*3*5。

21、打印出所有的 “水仙花数 “，所谓 “水仙花数 “是指一个三位数，其各位数字立方和等于该数本身。例如：153是一个 “水仙花数 “，因为153=1的三次方＋5的三次方＋3的三次方

22、原地交换两个变量的值

23、找出4字节整数的中位数

24、找到整数的平方根

25、实现斐波那契

网络
1、用Java Socket编程，读服务器几个字符，再写入本地显示

反射
1、反射机制提供了什么功能？

2、反射是如何实现的

3、哪里用到反射机制

4、反射中 Class.forName 和 ClassLoader 区别

5、反射创建类实例的三种方式是什么

6、如何通过反射调用对象的方法

7、如何通过反射获取和设置对象私有字段的值

8、反射机制的优缺点

数据库
1、写一段 JDBC 连Oracle的程序,并实现数据查询

算法
1、50个人围坐一圈，当数到三或者三的倍数出圈，问剩下的人是谁，原来的位置是多少

2、实现一个电梯模拟器用

3、写一个冒泡排序

4、写一个折半查找

5、随机产生20个不能重复的字符并排序

6、写一个函数，传入 2 个有序的整数数组，返回一个有序的整数数组

7、写一段代码在遍历 ArrayList 时移除一个元素

8、古典问题：有一对兔子，从出生后第3个月起每个月都生一对兔子，小兔子长到第四个月后每个月又生一对兔子，假如兔子都不死，问每个月的兔子总数为多少

9、约瑟芬环游戏

正则
1、请编写一段匹配IP地址的正则表达式

2、写出一个正则表达式来判断一个字符串是否是一个数字

字符串
1、写一个方法，入一个文件名和一个字符串，统计这个字符串在这个文件中出现的次数。

2、写一个程序找出所有字符串的组合，并检查它们是否是回文串

3、写一个字符串反转函数，输入abcde转换成edcba代码

4、小游戏，倒转句子中的单词

5、将GB2312编码的字符串转换为ISO-8859-1编码的字符串

6、请写一段代码来计算给定文本内字符“A”的个数。分别用迭代和递归两种方式

7、编写一个截取字符串的函数，输入为一个字符串和字节数，输出为按字节截取的字符串。 但是要保证汉字不被截半个，如“我ABC”，应该截为“我AB”，输入“我ABC汉DEF”，应该输出为“我ABC”，而不是“我ABC+汉的半个”

8、给定 2 个包含单词列表（每行一个）的文件，编程列出交集

9、打印出一个字符串的所有排列

10、将一个键盘输入的数字转化成中文输出(例如：输入1234567，输出:一百二拾三万四千五百六拾七)

11、在Web应用开发过程中经常遇到输出某种编码的字符，如从 GBK 到 ISO8859-1等，如何输出一个某种编码的字符串

日期
1、计算两个日期之间的差距

本文永久更新地址：https://github.com/nnngu/LearningNotes/blob/master/Interview/03%20%E7%99%BE%E5%BA%A6%E6%90%9C%E7%B4%A2%20%E2%80%9CJava%E9%9D%A2%E8%AF%95%E9%A2%98%E2%80%9D%20%E5%89%8D200%E9%A1%B5%EF%BC%88%E5%90%AB%E7%AD%94%E6%A1%88%EF%BC%89.md
